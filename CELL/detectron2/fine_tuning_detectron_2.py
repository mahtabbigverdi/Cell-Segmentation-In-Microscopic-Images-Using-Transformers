# -*- coding: utf-8 -*-
"""fine tuning detectron 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d8rKuwXxZQzZKtpT4ETslYkUB6iaH_U9

test GPU
"""

# !nvidia-smi -L

# """## Download and Preparation"""

# !gdown --id 1w-LbOkhXheyJv5vpkH608wMnimueZmUS
# !unzip train.zip
# !rm -rf train.zip
# !mkdir data
# !mv train data/
# !mkdir data/validation
# !mkdir data/validation/x

"""## Split"""

# import os
# vals = ['1935.bmp', '9611.bmp', '2284.bmp', '2438.bmp', '210.bmp', '1978.bmp', '9662.bmp', '2088.bmp', '2141.bmp', '9702.bmp', '9797.bmp', '9428.bmp', '2292.bmp', '9756.bmp', '2272.bmp', '1824.bmp', '2143.bmp', '1940.bmp', '9664.bmp', '9455.bmp', '2371.bmp', '9816.bmp', '2166.bmp', '601.bmp', '9884.bmp', '2213.bmp', '1730.bmp', '2196.bmp', '9351.bmp']
# for val_file in vals:
#     os.system('mv data/train/x/'+ val_file + " data/validation/x")

"""## Dependencies"""

# install dependencies: 
# !pip install pyyaml==5.1
# import torch, torchvision
# print(torch.__version__, torch.cuda.is_available())
# !gcc --version
# opencv is pre-installed on colab

# install detectron2: (Colab has CUDA 10.1 + torch 1.8)
# See https://detectron2.readthedocs.io/tutorials/install.html for instructions
# import torch
# assert torch.__version__.startswith("1.8")   # need to manually install torch 1.8 if Colab changes its default version
# !pip install detectron2 -f https://dl.fbaipublicfiles.com/detectron2/wheels/cu101/torch1.8/index.html
# exit(0)  # After installation, you need to "restart runtime" in Colab. This line can also restart runtime

"""# After restart runtime, start from here"""

# Some basic setup:
# Setup detectron2 logger
import torch, torchvision
import detectron2
from detectron2.utils.logger import setup_logger
setup_logger()

# import some common libraries
import numpy as np
import os, json, cv2, random
from PIL import Image

# import some common detectron2 utilities
from detectron2 import model_zoo
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog, DatasetCatalog

import os

l = os.listdir('../data/train/y')
mydict = {}
for el in l:
    temp = el.split("_")
    if temp[0] in mydict:
        mydict[temp[0]].append(el)
    else:
        mydict[temp[0]] = [el]
os.environ['CUDA_LAUNCH_BLOCKING'] = "1"
from detectron2.structures import BoxMode

def get_cell_dicts(img_dir):
    files = os.listdir(img_dir + '/x')[:20]

    dataset_dicts = []
    for idx, name in enumerate(files):
        record = {}
        
        filename = os.path.join(img_dir, "x", name)
        height, width = cv2.imread(filename).shape[:2]
        
        record["file_name"] = filename
        record["image_id"] = idx
        record["height"] = height
        record["width"] = width

        objs = []
 
        for el in mydict[name.split('.')[0]]:
            f = os.path.join('../data/train/y', el)
            img = Image.open(f)
            img = np.array(img)
            img = np.where(img == 40 , 20, img)
            img = np.where(img == 20 , 1, 0)
            if img.ndim == 3 :
                img  = img[:,:,0]
            pos_c = np.where(img)
            px = pos_c[1].tolist()
            py = pos_c[0].tolist()
            poly = [(x, y) for x, y in zip(px, py)]
            poly = [p for x in poly for p in x]

            obj = {
                "bbox": [np.min(px), np.min(py), np.max(px), np.max(py)],
                "bbox_mode": BoxMode.XYXY_ABS,
                "segmentation": [poly],
                "category_id": 0,  # just cell
            }
            objs.append(obj)
        record["annotations"] = objs
#        print(record)
#        print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
        dataset_dicts.append(record)
    return dataset_dicts

for d in ["train", "validation"]:
    DatasetCatalog.register("cell_" + d, lambda d=d: get_cell_dicts("../data/" + d))
    MetadataCatalog.get("cell_" + d).set(thing_classes=["cell"])
cell_metadata = MetadataCatalog.get("cell_train")
val_metadata = MetadataCatalog.get("cell_validation")
from detectron2.engine import DefaultTrainer

cfg = get_cfg()
cfg.MODEL.DEVICE ='cpu' 
cfg.merge_from_file(model_zoo.get_config_file("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml"))
cfg.DATASETS.TRAIN = ("cell_train",)
cfg.DATASETS.TEST = ()
cfg.DATALOADER.NUM_WORKERS = 1
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml")  # Let training initialize from model zoo
cfg.SOLVER.IMS_PER_BATCH = 2
cfg.SOLVER.BASE_LR = 0.00025  # pick a good LR
cfg.SOLVER.MAX_ITER = 20    # 300 iterations seems good enough for this toy dataset; you will need to train longer for a practical dataset
cfg.SOLVER.STEPS = []        # do not decay learning rate
cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 128  # faster, and good enough for this toy dataset (default: 512)
cfg.MODEL.ROI_HEADS.NUM_CLASSES = 1 # only has one class (cell). (see https://detectron2.readthedocs.io/tutorials/datasets.html#update-the-config-for-new-datasets)
# NOTE: this config means the number of classes, but a few popular unofficial tutorials incorrect uses num_classes+1 here.

os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)
trainer = DefaultTrainer(cfg) 
trainer.resume_or_load(resume=False)
trainer.train()

# Commented out IPython magic to ensure Python compatibility.
# Look at training curves in tensorboard:
# %load_ext tensorboard
# %tensorboard --logdir output

cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, "model_final.pth")  # path to the model we just trained
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.7   # set a custom testing threshold
predictor = DefaultPredictor(cfg)

from detectron2.utils.visualizer import ColorMode
dataset_dicts = get_cell_dicts("../data/validation")
for d in random.sample(dataset_dicts, 10):    
    im = cv2.imread(d["file_name"])
    outputs = predictor(im)  # format is documented at https://detectron2.readthedocs.io/tutorials/models.html#model-output-format
    v = Visualizer(im[:, :, ::-1],
                   metadata=val_metadata, 
                   scale=0.5, 
                   instance_mode=ColorMode.IMAGE_BW   # remove the colors of unsegmented pixels. This option is only available for segmentation models
    )
    out = v.draw_instance_predictions(outputs["instances"].to("cpu"))
    cv2.imwrite("../detectron2/images/" + d["file_name"].split("/")[-1].split('.')[0] +'.png', out.get_image()[:, :, ::-1])

from detectron2.evaluation import COCOEvaluator, inference_on_dataset
from detectron2.data import build_detection_test_loader
evaluator = COCOEvaluator("cell_validation", ("bbox", "segm"), False, output_dir="./output/")
val_loader = build_detection_test_loader(cfg, "cell_validation")
print(inference_on_dataset(trainer.model, val_loader, evaluator))
# another equivalent way to evaluate the model is to use `trainer.test`
